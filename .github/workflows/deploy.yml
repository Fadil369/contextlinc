name: Deploy ContextLinc Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build and test the frontend
  frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: out/

  # Deploy Workers (API and File Processor)
  deploy-workers:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Deploy API Worker
      working-directory: workers/api
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        npm install
        wrangler deploy --env production

    - name: Deploy File Processor Worker
      working-directory: workers/file-processor
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        npm install
        wrangler deploy --env production

  # Deploy Frontend to Cloudflare Pages
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [frontend, deploy-workers]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Deploy to Cloudflare Pages
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: |
        wrangler pages deploy out --project-name contextlinc --commit-dirty=true

  # Health checks after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-workers, deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Check API Worker Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://contextlinc-api.fadil.workers.dev/health)
        if [ "$response" != "200" ]; then
          echo "API Worker health check failed with status: $response"
          exit 1
        fi
        echo "API Worker is healthy ‚úÖ"

    - name: Check File Processor Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://contextlinc-file-processor.fadil.workers.dev/health)
        if [ "$response" != "200" ]; then
          echo "File Processor health check failed with status: $response"
          exit 1
        fi
        echo "File Processor is healthy ‚úÖ"

    - name: Check Frontend Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://context.thefadil.site)
        if [ "$response" != "200" ]; then
          echo "Frontend health check failed with status: $response"
          exit 1
        fi
        echo "Frontend is healthy ‚úÖ"

    - name: Deployment Success Notification
      run: |
        echo "üéâ ContextLinc Platform deployed successfully!"
        echo "üåê Landing Page: https://context.thefadil.site"
        echo "‚ö° Platform: https://context.thefadil.site/platform" 
        echo "üîß API: https://contextlinc-api.fadil.workers.dev"
        echo "üìÅ File Processor: https://contextlinc-file-processor.fadil.workers.dev"